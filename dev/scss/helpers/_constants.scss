// color constants
// taken from Glacier Sublime theme
$glacierColors: (
    teal: rgba(#266b85, 1.0),
    red: rgba(#d7503c, 1.0),
    orange: rgba(#f57542, 1.0),
    yellow: rgba(#f7f09d, 1.0),
    green: rgba(#76ffcd, 1.0),
    grey: rgba(#0e151b, 1.0),
    navy: rgba(#001221, 1.0),
);

$globalColors: (
    white: rgb(255, 255, 255),

    black: rgb(0, 0, 0),

    grey: (
        base: rgba(#47525d, 1.0),
        x-dark: rgba(#25282b, 1.0),
        dark: rgba(#3d464d, 1.0),
        medium: rgba(#7b8994, 1.0),
        light: rgba(#d0d4d9, 1.0),
        x-light: rgba(#f6f9fc, 1.0),
    ),

    blue: (
        base: rgba(#007ee5, 1.0),
        x-dark: rgba(#004c8a, 1.0),
        dark: rgba(#0071ce, 1.0),
        medium: rgba(#72b6ec, 1.0),
        light: rgba(#cce6fa, 1.0),
        x-light: rgba(#f4faff, 1.0),
    ),

    red: (
        base: rgba(#e82110, 1.0),
        x-dark: rgba(#921515, 1.0),
        dark: rgba(#c21c1c, 1.0),
        medium: rgba(#ed7a6f, 1.0),
        light: rgba(#fcbdbd, 1.0),
        x-light: rgba(#ffe3e3, 1.0),
    ),

    green: (
        base: rgba(#48ac68, 1.0),
        x-dark: rgba(#2c683f, 1.0),
        dark: rgba(#3a8a54, 1.0),
        medium: rgba(#86c49a, 1.0),
        light: rgba(#ddf0e2, 1.0),
        x-light: rgba(#edfaf1, 1.0),
    ),

    yellow: (
        base: rgba(#fcca00, 1.0),
        x-dark: rgba(#996e00, 1.0),
        dark: rgba(#c99700, 1.0),
        medium: rgba(#fce897, 1.0),
        light: rgba(#fff5cc, 1.0),
        x-light: rgba(#fffdec, 1.0),
    ),
);

$greyScale: (
    1: rgb(23, 23, 23),     // 0x17
    2: rgb(46, 46, 46),     // 0x2E
    3: rgb(69, 69, 69),     // 0x45
    4: rgb(92, 92, 92),     // 0x5C
    5: rgb(115, 115, 115),  // 0x73
    6: rgb(138, 138, 138),  // 0x8A
    7: rgb(161, 161, 161),  // 0xA1
    8: rgb(184, 184, 184),  // 0xB8
    9: rgb(232, 232, 232),  // 0xE8
    10: rgb(251, 251, 251), // 0xFB
);

// Defining acceptable alpha & shade values for color functions
//---------------------------
$__alpha-stops: (0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1);
$__shade-vals: ("x-dark", "dark", "base", "medium", "light", "x-light");

//---------------------------

@function glacier($color, $alpha: 100%) {
    @if map-has-key($glacierColors, $color) {
        $unitless-alpha: $alpha / ($alpha * 0 + 1);
        $alpha-val: $unitless-alpha / 100;

        @if index($__alpha-stops, $alpha-val) == null {
            @error "Only alpha values in 10% increments are allowed";
        }

        $glacier-val: map-get($glacierColors, $color);
        @return rgba($glacier-val, $alpha-val);
    } @else {
        @warn "No color of #{$color} found in $glacierColors map.";
    }
}

@function greyscale($gradation, $alpha: 100%) {
    @if map-has-key($greyScale, $gradation) {
        $unitless-alpha: $alpha / ($alpha * 0 + 1);
        $alpha-val: $unitless-alpha / 100;

        @if index($__alpha-stops, $alpha-val) == null {
            @error "Only alpha values in 10% increments are allowed";
        }

        $greyscale-val: map-get($greyScale, $gradation);
        @return rgba($greyscale-val, $alpha-val);
    } @else {
        @warn "No gradation of #{$gradation} found in $grayScale map.";
    }
}

//---------------------------
//
// The color function takes three arguments:
//  REQUIRED: Color
//    There are 7 colors (gray, blue, green, red, yellow, black, white).
//  OPTIONAL: Shade
//    Each color has 6 shades (x-dark, dark, base, medium, light, x-light).
//  OPTIONAL: Opacity
//    Each shade has 11 levels of opacity, ranging from 0% to 100% (transparent to opaque).
//
// Example: color(blue);
// This will create a base blue that is fully opaque.
//
// Example 2: color(red, dark, 80%);
// This will create a dark red that is 80% opaque.
//
// Example 3: color(yellow, 60%);
// This will create a base yellow that is 60% opaque.
//
//---------------------------
@function color($name, $properties...) {
    $n: length($properties);
    $i: 1;

    $shade-val: "base";
    $alpha-val: 1;

    @while $i <= $n {
        $current-property: (nth($properties, $i));

        @if type-of($current-property) == "string" {
            $shade-val: $current-property;
        } @else if type-of($current-property) == "number" {
            $unitless-alpha: $current-property / ($current-property * 0 + 1);
            $alpha-val: $unitless-alpha / 100;
        }

        $i: $i + 1;
    }

    @if index($__shade-vals, $shade-val) == null {
        @error "Only the following shades are allowed: " + $__shade-vals;
    }

    @if index($__alpha-stops, $alpha-val) == null {
        @error "Only alpha values in 10% increments are allowed";
    }

    @if map-has-key($globalColors, $name) {
        $rgb-val: ();

        @if $name == white or $name == black {
            $rgb-val: map-get($globalColors, $name);
        } @else {
            $rgb-val: map-get(map-get($globalColors, $name), $shade-val);
        }

        @return rgba($rgb-val, $alpha-val);
    } @else {
        @warn "No global color called #{$name} found."
            + "Are you sure it's in `color-constants.scss?`";
    }
}
